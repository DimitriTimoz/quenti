// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EnabledFeature {
  ExtendedFeedbackBank
}

model User {
  id              String           @id @default(cuid())
  name            String?
  username        String           @unique @db.Citext
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  verified        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  lastSeenAt      DateTime         @default(now())
  bannedAt        DateTime?
  displayName     Boolean          @default(true)
  features        EnabledFeature[] @default([])
  enableUsageData Boolean          @default(true)
  accounts        Account[]
  sessions        Session[]

  studySets           StudySet[]
  folders             Folder[]
  setAutoSave         SetAutoSave?
  studySetExperiences StudySetExperience[]
  folderExperiences   FolderExperience[]
  starredTerms        StarredTerm[]
  studiableTerms      StudiableTerm[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AllowedEmailRegex {
  regex     String   @id @unique
  label     String
  createdAt DateTime @default(now())
}

model WhitelistedEmail {
  email     String   @id @unique
  createdAt DateTime @default(now())
}

model RecentFailedLogin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
}

model StudySet {
  id                  String               @id @default(cuid())
  userId              String
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime             @default(now())
  savedAt             DateTime             @default(now()) @updatedAt
  title               String
  description         String
  tags                String[]             @default([])
  visibility          StudySetVisibility   @default(Public)
  wordLanguage        String               @default("en")
  definitionLanguage  String               @default("en")
  terms               Term[]
  studySetExperiences StudySetExperience[]
  folders             StudySetsOnFolders[]

  @@unique([id, userId])
}

enum StudySetVisibility {
  Private
  Unlisted
  Public
}

model Folder {
  id                String               @id @default(cuid())
  createdAt         DateTime             @default(now())
  userId            String
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String
  slug              String?
  description       String
  studySets         StudySetsOnFolders[]
  folderExperiences FolderExperience[]

  @@unique([id, userId])
  @@unique([userId, slug])
}

model StudySetsOnFolders {
  studySetId String
  folderId   String
  studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  folder     Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@id([studySetId, folderId])
}

model SetAutoSave {
  userId             String             @id
  savedAt            DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  title              String
  description        String
  tags               String[]           @default([])
  visibility         StudySetVisibility @default(Public)
  wordLanguage       String             @default("en")
  definitionLanguage String             @default("en")
  autoSaveTerms      AutoSaveTerm[]
}

model Term {
  id         String   @id @default(cuid())
  word       String
  definition String
  rank       Int
  studySetId String
  StudySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)

  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]

  @@unique([id, studySetId])
}

model AutoSaveTerm {
  id            String      @id @default(cuid())
  word          String
  definition    String
  rank          Int
  setAutoSaveId String
  setAutoSave   SetAutoSave @relation(fields: [setAutoSaveId], references: [userId], onDelete: Cascade)
}

model EntityShare {
  id       String
  entityId String     @unique
  type     EntityType

  @@id([id, entityId])
}

enum EntityType {
  StudySet
  Folder
}

enum StudiableMode {
  Flashcards
  Learn
}

enum LearnMode {
  Learn
  Review
}

enum StudySetAnswerMode {
  Word
  Definition
  Both
}

enum LimitedStudySetAnswerMode {
  Word
  Definition
}

enum MultipleAnswerMode {
  One
  All
  Unknown
}

model StudySetExperience {
  id                   String                    @id @default(cuid())
  userId               String
  studySetId           String
  viewedAt             DateTime
  user                 User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySet             StudySet                  @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  shuffleFlashcards    Boolean                   @default(false)
  learnRound           Int                       @default(0)
  learnMode            LearnMode                 @default(Learn)
  shuffleLearn         Boolean                   @default(false)
  studyStarred         Boolean                   @default(false)
  answerWith           StudySetAnswerMode        @default(Word)
  multipleAnswerMode   MultipleAnswerMode        @default(Unknown)
  extendedFeedbackBank Boolean                   @default(false)
  enableCardsSorting   Boolean                   @default(false)
  cardsStudyStarred    Boolean                   @default(false)
  cardsAnswerWith      LimitedStudySetAnswerMode @default(Word)

  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]

  @@unique([userId, studySetId])
}

model FolderExperience {
  id                 String                    @id @default(cuid())
  userId             String
  folderId           String
  viewedAt           DateTime
  user               User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder             Folder                    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  shuffleFlashcards  Boolean                   @default(false)
  enableCardsSorting Boolean                   @default(false)
  cardsStudyStarred  Boolean                   @default(false)
  cardsAnswerWith    LimitedStudySetAnswerMode @default(Word)

  studiableTerms StudiableTerm[]

  @@unique([userId, folderId])
}

model StudiableTerm {
  userId             String
  termId             String
  experienceId       String?
  folderExperienceId String?
  mode               StudiableMode @default(Learn)
  correctness        Int
  appearedInRound    Int?
  incorrectCount     Int           @default(0)
  studiableRank      Int?

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  term               Term                @relation(fields: [termId], references: [id], onDelete: Cascade)
  studySetExperience StudySetExperience? @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  folderExperience   FolderExperience?   @relation(fields: [folderExperienceId], references: [id], onDelete: Cascade)

  @@id([userId, termId])
}

model StarredTerm {
  userId       String
  termId       String
  experienceId String

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  term               Term               @relation(fields: [termId], references: [id], onDelete: Cascade)
  studySetExperience StudySetExperience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@id([userId, termId])
}
