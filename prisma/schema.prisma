// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../"
  fileName = "kysely-types.ts"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  imports       = "./zod-schemas"
  relationModel = "default"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserType {
  Student
  Teacher
}

model User {
  id               String    @id @default(cuid())
  name             String?
  username         String    @unique
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  type             UserType  @default(Student)
  verified         Boolean   @default(false)
  createdAt        DateTime  @default(now())
  lastSeenAt       DateTime  @default(now())
  bannedAt         DateTime?
  displayName      Boolean   @default(true)
  flags            Int       @default(0)
  /// @zod.custom(imports.userMetadataSchema)
  metadata         Json?
  enableUsageData  Boolean   @default(true)
  changelogVersion String
  organizationId   String?

  accounts       Account[]
  sessions       Session[]
  studySets      StudySet[]
  folders        Folder[]
  setAutoSave    SetAutoSave?
  containers     Container[]
  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]
  organization   Organization?   @relation(fields: [organizationId], references: [id])
  highscores     Highscore[]
  organizations  Membership[]

  @@index([organizationId])
}

model VerificationToken {
  identifier     String
  token          String        @unique
  expires        DateTime
  expiresInDays  Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@index([token])
}

model Organization {
  id        String                      @id @default(cuid())
  name      String
  createdAt DateTime                    @default(now())
  icon      Int                         @default(0)
  published Boolean                     @default(false)
  domain    VerifiedOrganizationDomain?
  /// @zod.custom(imports.orgMetadataSchema)
  metadata  Json?

  members     Membership[]
  users       User[]
  inviteToken VerificationToken?
}

model VerifiedOrganizationDomain {
  id            String    @id @default(cuid())
  orgId         String    @unique
  domain        String    @unique
  verifiedEmail String    @unique
  verifiedAt    DateTime?

  organization Organization @relation(fields: [orgId], references: [id])
}

enum MembershipRole {
  Member
  Admin
  Owner
}

model Membership {
  id       String         @id @default(cuid())
  orgId    String
  userId   String
  accepted Boolean        @default(false)
  role     MembershipRole

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@index([orgId])
  @@index([userId])
}

model AllowedEmailRegex {
  regex     String   @id @unique
  label     String
  createdAt DateTime @default(now())
}

model WhitelistedEmail {
  email     String   @id @unique
  createdAt DateTime @default(now())
}

model RecentFailedLogin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
}

model StudySet {
  id                 String               @id @default(cuid())
  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  savedAt            DateTime             @default(now()) @updatedAt
  title              String               @db.VarChar(255)
  description        String               @db.VarChar(2000)
  tags               Json                 @default("[]")
  visibility         StudySetVisibility   @default(Public)
  wordLanguage       String               @default("en")
  definitionLanguage String               @default("en")
  terms              Term[]
  containers         Container[]
  folders            StudySetsOnFolders[]
  leaderboards       Leaderboard[]

  @@unique([id, userId])
  @@index([userId])
}

enum StudySetVisibility {
  Private
  Unlisted
  Public
}

model Folder {
  id           String               @id @default(cuid())
  createdAt    DateTime             @default(now())
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String               @db.VarChar(255)
  slug         String?
  description  String               @db.VarChar(2000)
  studySets    StudySetsOnFolders[]
  containers   Container[]
  leaderboards Leaderboard[]

  @@unique([id, userId])
  @@unique([userId, slug])
}

model StudySetsOnFolders {
  studySetId String
  folderId   String
  studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  folder     Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@id([studySetId, folderId])
  @@index([studySetId])
  @@index([folderId])
}

model SetAutoSave {
  userId             String             @id
  savedAt            DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  title              String             @db.VarChar(255)
  description        String             @db.VarChar(2000)
  tags               Json               @default("[]")
  visibility         StudySetVisibility @default(Public)
  wordLanguage       String             @default("en")
  definitionLanguage String             @default("en")
  autoSaveTerms      AutoSaveTerm[]

  @@index([userId])
}

model Term {
  id         String   @id @default(cuid())
  word       String   @db.VarChar(1000)
  definition String   @db.VarChar(1000)
  rank       Int
  studySetId String
  StudySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)

  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]

  @@unique([id, studySetId])
  @@index([studySetId])
}

model AutoSaveTerm {
  id            String      @id @default(cuid())
  word          String      @db.VarChar(1000)
  definition    String      @db.VarChar(1000)
  rank          Int
  setAutoSaveId String
  setAutoSave   SetAutoSave @relation(fields: [setAutoSaveId], references: [userId], onDelete: Cascade)

  @@index([setAutoSaveId])
}

model Leaderboard {
  id       String          @id @default(cuid())
  entityId String
  type     LeaderboardType

  studySet   StudySet?   @relation(fields: [entityId], references: [id], map: "leaderboard_study_set", onDelete: Cascade)
  folder     Folder?     @relation(fields: [entityId], references: [id], map: "leaderboard_folder", onDelete: Cascade)
  highscores Highscore[]

  @@unique([id, entityId, type])
  @@index([entityId])
}

model Highscore {
  leaderboardId String
  userId        String
  time          Int
  timestamp     DateTime @updatedAt
  eligible      Boolean  @default(true)

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaderboard Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)

  @@id([leaderboardId, userId, eligible])
}

model EntityShare {
  id       String
  entityId String     @unique
  type     EntityType

  @@id([id, entityId])
}

enum EntityType {
  StudySet
  Folder
}

enum StudiableMode {
  Flashcards
  Learn
}

enum LearnMode {
  Learn
  Review
}

enum LeaderboardType {
  Match
}

enum StudySetAnswerMode {
  Word
  Definition
  Both
}

enum LimitedStudySetAnswerMode {
  Word
  Definition
}

enum MultipleAnswerMode {
  One
  All
  Unknown
}

enum ContainerType {
  StudySet
  Folder
}

model Container {
  id                   String                    @id @default(cuid())
  entityId             String
  type                 ContainerType
  userId               String
  viewedAt             DateTime
  user                 User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shuffleFlashcards    Boolean                   @default(false)
  learnRound           Int                       @default(0)
  learnMode            LearnMode                 @default(Learn)
  shuffleLearn         Boolean                   @default(false)
  studyStarred         Boolean                   @default(false)
  answerWith           StudySetAnswerMode        @default(Word)
  multipleAnswerMode   MultipleAnswerMode        @default(Unknown)
  extendedFeedbackBank Boolean                   @default(false)
  enableCardsSorting   Boolean                   @default(false)
  cardsRound           Int                       @default(0)
  cardsStudyStarred    Boolean                   @default(false)
  cardsAnswerWith      LimitedStudySetAnswerMode @default(Definition)
  matchStudyStarred    Boolean                   @default(false)

  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]
  studySet       StudySet?       @relation(fields: [entityId], references: [id], map: "container_study_set", onDelete: Cascade)
  folder         Folder?         @relation(fields: [entityId], references: [id], map: "container_folder", onDelete: Cascade)

  @@unique([userId, entityId, type])
  @@index([entityId])
}

model StudiableTerm {
  userId          String
  termId          String
  containerId     String
  mode            StudiableMode @default(Learn)
  correctness     Int
  appearedInRound Int?
  incorrectCount  Int           @default(0)
  studiableRank   Int?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  term      Term      @relation(fields: [termId], references: [id], onDelete: Cascade)
  container Container @relation(fields: [containerId], references: [id], onDelete: Cascade)

  // Full composite primary key will always be used for lookups
  @@id([userId, containerId, termId, mode])
  @@index([containerId])
}

model StarredTerm {
  userId      String
  termId      String
  containerId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  term      Term      @relation(fields: [termId], references: [id], onDelete: Cascade)
  container Container @relation(fields: [containerId], references: [id], onDelete: Cascade)

  @@id([userId, termId])
  @@index([containerId])
}
