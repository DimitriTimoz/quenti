// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  studySets           StudySet[]
  setAutoSave         SetAutoSave?
  studySetExperiences StudySetExperience[]
  starredTerms        StarredTerm[]
  studiableTerms      StudiableTerm[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudySet {
  id                  String               @id @default(cuid())
  userId              String
  user                User                 @relation(fields: [userId], references: [id], onDelete: NoAction)
  title               String
  description         String
  terms               Term[]
  termOrder           String[]
  studySetExperiences StudySetExperience[]
}

model SetAutoSave {
  userId            String         @id
  savedAt           DateTime       @updatedAt
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String
  description       String
  autoSaveTerms     AutoSaveTerm[]
  autoSaveTermOrder String[]
}

model Term {
  id         String   @id @default(cuid())
  word       String
  definition String
  StudySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  studySetId String

  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]
}

model AutoSaveTerm {
  id            String      @id @default(cuid())
  word          String
  definition    String
  setAutoSaveId String
  setAutoSave   SetAutoSave @relation(fields: [setAutoSaveId], references: [userId], onDelete: Cascade)
}

model StudySetExperience {
  id                String   @id @default(cuid())
  userId            String
  studySetId        String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySet          StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  shuffleFlashcards Boolean  @default(false)
  learnRound        Int      @default(0)

  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]

  @@unique([userId, studySetId])
}

model StudiableTerm {
  userId          String
  termId          String
  experienceId    String
  correctness     Int
  appearedInRound Int

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  term               Term               @relation(fields: [termId], references: [id], onDelete: Cascade)
  studySetExperience StudySetExperience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@id([userId, termId])
}

model StarredTerm {
  userId       String
  termId       String
  experienceId String

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  term               Term               @relation(fields: [termId], references: [id], onDelete: Cascade)
  studySetExperience StudySetExperience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@id([userId, termId])
}
